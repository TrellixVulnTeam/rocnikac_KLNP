import argparse
from urllib.error import URLError
from urllib.request import Request, urlopen
import time
import json

"""
	Following code is necessary for requesting golemio api.
	code copied from https://golemioapi.docs.apiary.io/#reference/public-transport/vehicle-positions/get-all-vehicle-positions
	access token generated by https://api.golemio.cz/api-keys/auth/sign-in
"""
headers = {
	'Content-Type': 'application/json; charset=utf-8',
	'x-access-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImNpem1hcmZpbGlwQGdtYWlsLmNvbSIsImlkIjo3NiwibmFtZSI6bnVsbCwic3VybmFtZSI6bnVsbCwiaWF0IjoxNTcwNTQ2MTU2LCJleHAiOjExNTcwNTQ2MTU2LCJpc3MiOiJnb2xlbWlvIiwianRpIjoiMzAxYWNhNDUtNGRlNC00ZDRmLWI4NzAtMzQwMDQ5OTM1MzBhIn0.4rCELzCNY8XOSvjqQA7cKocPGJ8D2ezhXiWUkIRUNjg'
}
request = Request('https://api.golemio.cz/v1/vehiclepositions', headers=headers)

if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("--file_name", default="last_positions", type=str, help="The last generated output file")
	parser.add_argument("--update_time", default=10, type=int, help="Time to next request")
	parser.add_argument("--update_error", default=20, type=int, help="Update time if network error occurred")
	args = parser.parse_args()

	while True:

		"""
			Download the actual information about buses 
			and store them in the json_data array.
		"""

		req_start = time.time()
		try:
			webURL = urlopen(request)
			response_body = webURL.read()
			encoding = webURL.info().get_content_charset('utf-8')
			json_data = json.loads(response_body.decode(encoding))
		except URLError as e:
			print("Network error: \n", e)
			time.sleep(args.update_error - (time.time() - req_start))
			continue

		"""
			Process json data and generate simplify json file
		"""
		geojson = {}
		geojson["type"] = "FeatureCollection"
		geojson["timestamp"] = time.strftime("%Y-%m-%d-%H:%M:%S")
		geojson["features"] = []

		for bus_input_list in json_data["features"]:
			bus_properties = bus_input_list["properties"]["trip"]
			bus_output_list = {}
			bus_output_list["type"] = "Feature"
			bus_output_list["properties"] = {}
			bus_output_list["properties"]["message"] = bus_properties["cis_short_name"]
			bus_output_list["properties"]["iconSize"] = [30, 30]
			bus_output_list["geometry"] = {}
			bus_output_list["geometry"]["coordinates"] = bus_input_list["geometry"]["coordinates"]
			bus_output_list["geometry"]["type"] = "Point"

			geojson["features"].append(bus_output_list)

		with open(args.file_name, "w+") as f:
			f.seek(0)
			f.write(json.dumps(geojson))
			f.close()
			time.sleep(args.update_time - (time.time() - req_start))
