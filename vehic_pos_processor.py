import argparse
from urllib.error import URLError
from urllib.request import Request, urlopen
import time
import json
import logging
import os
import shutil
from pathlib import Path


def downloadURL(request):
	webURL = urlopen(request)
	response_body = webURL.read()
	encoding = webURL.info().get_content_charset('utf-8')
	return json.loads(response_body.decode(encoding))


def transform_shape_json_file(old_json_data):
	new_json_data = {}
	new_json_data["type"] = "FeatureCollection"
	new_json_data["features"] = [None]
	new_json_data["features"][0] = {}
	new_json_data["features"][0]["type"] = "Feature"
	new_json_data["features"][0]["geometry"] = {}
	new_json_data["features"][0]["geometry"]["type"] = "LineString"
	new_json_data["features"][0]["geometry"]["properties"] = {}
	new_json_data["features"][0]["geometry"]["coordinates"] = []
	for feature in old_json_data["features"]:
		new_json_data["features"][0]["geometry"]["coordinates"].append(feature["geometry"]["coordinates"])
	return new_json_data


"""
	Following header is necessary for requesting golemio api.
	code copied from https://golemioapi.docs.apiary.io/#reference/public-transport/vehicle-positions/get-all-vehicle-positions
	access token generated by https://api.golemio.cz/api-keys/auth/sign-in
"""
headers = {
	'Content-Type': 'application/json; charset=utf-8',
	'x-access-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImNpem1hcmZpbGlwQGdtYWlsLmNvbSIsImlkIjo3NiwibmFtZSI6bnVsbCwic3VybmFtZSI6bnVsbCwiaWF0IjoxNTcwNTQ2MTU2LCJleHAiOjExNTcwNTQ2MTU2LCJpc3MiOiJnb2xlbWlvIiwianRpIjoiMzAxYWNhNDUtNGRlNC00ZDRmLWI4NzAtMzQwMDQ5OTM1MzBhIn0.4rCELzCNY8XOSvjqQA7cKocPGJ8D2ezhXiWUkIRUNjg'
}

if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("--file_name", default="last_positions", type=str, help="The last generated output file")
	parser.add_argument("--update_time", default=20, type=int, help="Time to next request")
	parser.add_argument("--update_error", default=20, type=int, help="Update time if network error occurred")
	parser.add_argument("--log", default="veh_pos_proc.log", type=str, help="Name of logging file")
	parser.add_argument("--trips_folder", default="trips", type=str, help="Name of trips folder")
	args = parser.parse_args()
	logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s', level=logging.INFO, filename=args.log, filemode='w')
	logging.info("Program has started")


	active_trips = {f[:-6] for f in os.listdir(args.trips_folder)}

	# uncomment the following code for empty trips.shape folder after relaunch
	# active_trips = set()
	# shutil.rmtree(args.trips_folder)
	# os.makedirs(args.trips_folder)

	while True:

		"""
			Download the actual information about buses 
			and store them in the json_data array.
		"""

		req_start = time.time()
		try:
			json_data = downloadURL(Request('https://api.golemio.cz/v1/vehiclepositions', headers=headers))
		except URLError as e:
			logging.error("Network error: " + str(e))
			time.sleep(args.update_error - (time.time() - req_start))
			continue

		"""
			Process json data and generate simplify json file
		"""
		geojson = {}
		geojson["type"] = "FeatureCollection"
		geojson["timestamp"] = time.strftime("%Y-%m-%d-%H:%M:%S")
		geojson["features"] = []

		current_trips = set()

		for bus_input_list in json_data["features"]:
			bus_properties = bus_input_list["properties"]["trip"]
			bus_output_list = {}
			bus_output_list["type"] = "Feature"
			bus_output_list["properties"] = {}
			bus_output_list["properties"]["gtfs_trip_id"] = bus_properties["gtfs_trip_id"]
			bus_output_list["properties"]["message"] = bus_properties["cis_short_name"]
			bus_output_list["properties"]["iconSize"] = [30, 30]
			bus_output_list["geometry"] = {}
			bus_output_list["geometry"]["coordinates"] = bus_input_list["geometry"]["coordinates"]
			bus_output_list["geometry"]["type"] = "Point"
			geojson["features"].append(bus_output_list)

			current_trips.add(bus_properties["gtfs_trip_id"])

		with open(args.file_name, "w+") as f:
			f.seek(0)
			f.write(json.dumps(geojson))
			f.close()
			logging.info("Vehicle positions file updated")

		for trip in active_trips - current_trips:
			os.remove(Path(args.trips_folder) / (trip + ".shape"))
			logging.info("Shape of trip " + trip + " file removed")

		for trip in current_trips - active_trips:
			try:
				json_data = downloadURL(Request('https://api.golemio.cz/v1/gtfs/trips/' + trip, headers=headers))
				json_data = downloadURL(Request('https://api.golemio.cz/v1/gtfs/shapes/' + json_data["shape_id"], headers=headers))
				json_data = transform_shape_json_file(json_data)
				with open(Path(args.trips_folder) / (trip + ".shape"), "w+") as f:
					f.seek(0)
					f.write(json.dumps(json_data))
					f.close()
					logging.info("New shape of trip " + trip + " file exported")
			except URLError as e:
				logging.error("Network error: " + str(e))
				current_trips -= trip
				continue
		active_trips = current_trips

		try:
			time.sleep(args.update_time - (time.time() - req_start))
		except Exception as e:
			logging.warning("Sleep failed, " + str(e))
			continue

