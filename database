CREATE DATABASE 'vehicles_info'

SET @@global.time_zone = '+00:00';

CREATE TABLE `vehicles_info`.`stops` (
  `id_stop` INT(32) NOT NULL AUTO_INCREMENT,
  `stop_id` VARCHAR(31) NOT NULL COMMENT 'ID used in golemio API',
  `parent_id_stop` INT(32) NOT NULL,
  `stop_name` VARCHAR(123) NOT NULL,
  `lat` DECIMAL(9,6) NOT NULL,
  `lon` DECIMAL(9,6) NOT NULL,
  PRIMARY KEY (`id_stop`, `stop_id`));

ALTER TABLE `vehicles_info`.`stops`
ADD INDEX `parent_stop_idx` (`parent_id_stop` ASC) VISIBLE;
;
ALTER TABLE `vehicles_info`.`stops`
ADD CONSTRAINT `parent_stop`
  FOREIGN KEY (`parent_id_stop`)
  REFERENCES `vehicles_info`.`stops` (`id_stop`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

CREATE TABLE `vehicles_info`.`trips` (
  `id_trip` INT(32) NOT NULL AUTO_INCREMENT,
  `trip_id` VARCHAR(31) NOT NULL COMMENT 'ID used in golemio API';
  `trip_headsign_id` INT(32) NOT NULL COMMENT 'Link into headsigns table',
  `current_delay` INT(32) NOT NULL,
  `shape_traveled` INT(32) NOT NULL,
  `trip_no` VARCHAR(7) NOT NULL COMMENT 'Unique number for the line.',
  PRIMARY KEY (`id_trip`));

CREATE TABLE `vehicles_info`.`rides` (
  `id_trip` INT(32) NOT NULL,
  `id_stop` INT(32) NOT NULL,
  `arrival_time` TIME NOT NULL,
  `departure_time` TIME NOT NULL,
  `shape_dist_traveled` INT(32) NOT NULL
  PRIMARY KEY (`id_trip`));

CREATE TABLE `vehicles_info`.`trip_coordinates` (
  `id_trip` INT(32) NOT NULL,
  `lat` DECIMAL(9,6) NOT NULL,
  `lon` DECIMAL(45) NOT NULL,
  `time` DATETIME NOT NULL,
  `delay` INT(32) NOT NULL),
  `shape_traveled` INT(32) NOT NULL;

ALTER TABLE `vehicles_info`.`trip_coordinates`
ADD INDEX `trip_idx` (`id_trip` ASC) VISIBLE;
;
ALTER TABLE `vehicles_info`.`trip_coordinates`
ADD CONSTRAINT `trip`
  FOREIGN KEY (`id_trip`)
  REFERENCES `vehicles_info`.`trips` (`id_trip`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

ALTER TABLE `vehicles_info`.`rides`
ADD INDEX `id_trip_ride_idx` (`id_trip` ASC) VISIBLE,
DROP PRIMARY KEY;
;

ALTER TABLE `vehicles_info`.`rides`
ADD CONSTRAINT `id_trip_ride`
  FOREIGN KEY (`id_trip`)
  REFERENCES `vehicles_info`.`trips` (`id_trip`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

ALTER TABLE `vehicles_info`.`rides`
ADD CONSTRAINT `id_stop_ride`
  FOREIGN KEY (`id_stop`)
  REFERENCES `vehicles_info`.`stops` (`id_stop`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

ALTER TABLE `vehicles_info`.`trips`
ADD INDEX `headsign` (`trip_headsign_id` ASC) VISIBLE;
;

CREATE TABLE `vehicles_info`.`trip_headsigns` (
  `id_trip_headsigns` INT(32) NOT NULL AUTO_INCREMENT,
  `trip_headsigns` VARCHAR(123) NOT NULL,
  PRIMARY KEY (`id_trip_headsigns`));

ALTER TABLE `vehicles_info`.`trip_headsigns`
ADD CONSTRAINT `headsign_trip`
  FOREIGN KEY (`id_trip_headsigns`)
  REFERENCES `vehicles_info`.`trips` (`trip_headsign_id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

ALTER TABLE `vehicles_info`.`stops`
ADD INDEX `stop_parent_spot_idx` (`parent_id_stop` ASC) VISIBLE;
;
ALTER TABLE `vehicles_info`.`stops`
ADD CONSTRAINT `stop_parent_spot`
  FOREIGN KEY (`parent_id_stop`)
  REFERENCES `vehicles_info`.`stops` (`id_stop`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

USE `vehicles_info`;
CREATE  OR REPLACE VIEW `trip_no_trip_headsign` AS
SELECT trips.trip_no, trip_headsigns.trip_headsigns
FROM trips
INNER JOIN trip_headsigns ON trips.trip_headsign_id=trip_headsigns.id_trip_headsigns;

ALTER TABLE `vehicles_info`.`trip_headsigns`
ADD INDEX `value_index` (`trip_headsigns` ASC) VISIBLE;
;

ALTER TABLE `vehicles_info`.`trips`
ADD INDEX `trip_id` (`trip_id` ASC) VISIBLE;
;

CREATE DEFINER=`root`@`localhost` FUNCTION `insert_headsign_if_exists_and_return_id`(headsign VARCHAR(31)) RETURNS int(32)
    DETERMINISTIC
BEGIN
	DECLARE id INT;
	IF EXISTS(SELECT `id_trip_headsigns` FROM `trip_headsigns` WHERE `trip_headsigns` = headsign LIMIT 1) THEN
		SELECT `id_trip_headsigns` INTO id FROM `trip_headsigns` WHERE `trip_headsigns` = headsign LIMIT 1;
		RETURN id;
	ELSE
		INSERT INTO `trip_headsigns` (`trip_headsigns`) VALUE (headsign);
        SELECT LAST_INSERT_ID() INTO id;
        RETURN id;
	END IF;
END

ALTER TABLE `vehicles_info`.`trip_headsigns`
ADD UNIQUE INDEX `trip_headsigns_UNIQUE` (`trip_headsigns` ASC) VISIBLE;
;

ALTER TABLE `vehicles_info`.`trips`
ADD UNIQUE INDEX `trip_id_UNIQUE` (`trip_id` ASC) VISIBLE;

CREATE FUNCTION `insert_headsign_if_exists_and_return_id` (headsign VARCHAR(123))
RETURNS INTEGER
DETERMINISTIC
BEGIN
	INSERT IGNORE INTO trip_headsigns (trip_headsigns) VALUES (headsign);
    SELECT id_trip_headsigns INTO @id FROM trip_headsigns WHERE trip_headsigns = headsign;
RETURN @id;
END

ALTER TABLE `vehicles_info`.`stops`
ADD UNIQUE INDEX `stop_id_UNIQUE` (`stop_id` ASC) VISIBLE;
;

ALTER TABLE `vehicles_info`.`stops`
DROP FOREIGN KEY `stop_parent_spot`;
ALTER TABLE `vehicles_info`.`stops`
CHANGE COLUMN `parent_id_stop` `parent_id_stop` INT(32) NULL ;
ALTER TABLE `vehicles_info`.`stops`
ADD CONSTRAINT `stop_parent_spot`
  FOREIGN KEY (`parent_id_stop`)
  REFERENCES `vehicles_info`.`stops` (`id_stop`);

CREATE FUNCTION `insert_trip_and_return_id` (trip_id VARCHAR(31), trip_headsign_id INT(32), current_delay INT(32), shape_traveled INT(32), trip_no VARCHAR(7))
RETURNS INTEGER
DETERMINISTIC
BEGIN
	INSERT INTO trips (trip_id, trip_headsign_id, current_delay, shape_traveled, trip_no) VALUES (trip_id, trip_headsign_id, current_delay, shape_traveled, trip_no);
    SELECT LAST_INSERT_ID() INTO @id;
RETURN @id;
END

CREATE FUNCTION `insert_stop_and_return_id` (stop_id VARCHAR(31), stop_name VARCHAR(123), lat DECIMAL(9, 6), lon DECIMAL(9, 6), parent_id_stop INT(32))
RETURNS INTEGER
DETERMINISTIC
BEGIN
	INSERT INTO stops (stop_id, stop_name, lat, lon, parent_id_stop) VALUES (stop_id, stop_name, lat, lon, parent_id_stop);
    SELECT LAST_INSERT_ID() INTO @id;
RETURN @id;
END

ALTER TABLE `vehicles_info`.`stops`
DROP FOREIGN KEY `stop_parent_spot`;
ALTER TABLE `vehicles_info`.`stops`
ADD CONSTRAINT `stop_parent_spot`
  FOREIGN KEY (`parent_id_stop`)
  REFERENCES `vehicles_info`.`stops` (`id_stop`)
  ON DELETE CASCADE;

CREATE FUNCTION `last_stop_of_trip` (id_trip_to_find INT(32))
RETURNS INTEGER
DETERMINISTIC
BEGIN
	DECLARE id_stop_to_find INT(32);
	SET id_stop_to_find = 0;
	SELECT id_stop INTO id_stop_to_find FROM rides WHERE shape_dist_traveled <= (
		SELECT `shape_traveled` FROM trip_coordinates WHERE id_trip = id_trip_to_find ORDER BY `time` DESC LIMIT 1
	) AND id_trip_to_find = id_trip ORDER BY shape_dist_traveled DESC LIMIT 1;
 RETURN id_stop_to_find;
END

ALTER TABLE `vehicles_info`.`trip_coordinates`
ADD INDEX `shape_traveledx` (`shape_traveled` ASC) VISIBLE;
;

ALTER TABLE `vehicles_info`.`rides`
ADD INDEX `shape_dist_traveledx` (`shape_dist_traveled` ASC) VISIBLE;
;


#vsechny pary zastavek mezi kteryma se jezdi (jednosmerne)
SELECT
	id_trip,
    id_stop,
    shape_dist_traveled,
    departure_time,
    LEAD(id_stop, 1) OVER (
        PARTITION BY id_trip
        ORDER BY shape_dist_traveled
    ) lead_stop,
    LEAD(shape_dist_traveled, 1) OVER (
        PARTITION BY id_trip
        ORDER BY shape_dist_traveled
    ) lead_stop_shape_dtist_traveled,
    LEAD(arrival_time, 1) OVER (
        PARTITION BY id_trip
        ORDER BY shape_dist_traveled
    ) lead_stop_arrival_time
FROM
    rides
order by
	id_stop


select * from rides where id_trip in (select id_trip from (
SELECT
	id_trip,
    id_stop,
    shape_dist_traveled,
    departure_time,
    LEAD(id_stop, 1) OVER (
        PARTITION BY id_trip
        ORDER BY shape_dist_traveled
    ) lead_stop,
    LEAD(shape_dist_traveled, 1) OVER (
        PARTITION BY id_trip
        ORDER BY shape_dist_traveled
    ) lead_stop_shape_dtist_traveled,
    LEAD(arrival_time, 1) OVER (
        PARTITION BY id_trip
        ORDER BY shape_dist_traveled
    ) lead_stop_arrival_time
FROM
    rides
order by
	id_stop
) AS inn
where inn.id_stop = 4918 and inn.lead_stop = 2411)
order by id_trip, shape_dist_traveled

select * from (
	SELECT id_trip, id_stop, shape_dist_traveled, departure_time, LEAD(id_stop, 1) OVER (PARTITION BY id_trip ORDER BY shape_dist_traveled) lead_stop, LEAD(shape_dist_traveled, 1) OVER (PARTITION BY id_trip ORDER BY shape_dist_traveled) lead_stop_shape_dist_traveled, LEAD(departure_time, 1) OVER (PARTITION BY id_trip ORDER BY shape_dist_traveled) lead_stop_departure_time FROM rides
) as inn
JOIN trip_coordinates ON trip_coordinates.id_trip = inn.id_trip
WHERE trip_coordinates.shape_traveled between inn.shape_dist_traveled and inn.lead_stop_shape_dist_traveled
order by id_stop, lead_stop
